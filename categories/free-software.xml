<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tangamandapio (Posts about free software)</title><link>http://elopio.net/</link><description></description><atom:link href="http://elopio.net/categories/free-software.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Thu, 05 Apr 2018 01:52:09 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Incan quipus and cipher with prime number factorization</title><link>http://elopio.net/blog/incan-prime-factorization/</link><dc:creator>Leo Arias</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Quipu#/media/File:Nueva_cor%C3%B3nica_y_buen_gobierno_(1936_facsimile)_p360.png"&gt;&lt;img alt="Drawing of an inca and his quipu" src="https://upload.wikimedia.org/wikipedia/commons/f/f0/Nueva_cor%C3%B3nica_y_buen_gobierno_%281936_facsimile%29_p360.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;According to this wise man [Nordenskiöld], the indians placed in their tombs
only quipus with numbers that for them had a magical value, expressing them
not in a direct way but through others that included them or their multiples,
and trying to make them coincide with the resulting numbers of calculations
from consulting the stars. [...].
The purpose that lead the indians to such practice was to entertain, with
this complicated "rebus", the evil spirits, who would struggle to untie the
knots in the strings and find this magical numbering [...].&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;on Estudio sobre los quipus, from Carlos Radicati di Primeglio.
(the translation is mine)&lt;/p&gt;
&lt;p&gt;And that's how the incas invented the cipher with prime number factorization,
the base of all our secure communications and cryptocurrencies. :D&lt;/p&gt;&lt;/div&gt;</description><category>free software</category><category>readings</category><guid>http://elopio.net/blog/incan-prime-factorization/</guid><pubDate>Tue, 09 Jan 2018 16:08:35 GMT</pubDate></item><item><title>San José participará en #CompletetheMap, para mejorar el mapa de la ciudad entre todes</title><link>http://elopio.net/blog/completethemap/</link><dc:creator>Leo Arias</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;a href="https://www.mapillary.com/"&gt;Mapillary&lt;/a&gt; por primera vez ha lanzado un reto
global de captura de imágenes. Desde el 11 de diciembre hasta el 31 de enero,
San José estará participando en
&lt;a href="https://blog.mapillary.com/community/2017/06/29/completethemap-challenges.html"&gt;#CompletetheMap&lt;/a&gt;
para completar su mapa capturando fotos con las herramientas de Mapillary,
junto a ciudades, pueblos y lugares remotos de todo el mundo.&lt;/p&gt;
&lt;p&gt;Mapillary es una plataforma colaborativa que permite visualizar el mundo con
fotos a nivel de la calle. Las fotos son contribuidas por una amplia gama de
fuentes, incluyendo personas, gobiernos, agencias humanitarias y empresas de
mapas. Las fotos luego son procesadas por Mapillary para extraer datos
geográficos como límites de velocidad, giros prohibidos, ciclovías y la
cantidad de vegetación en un lugar. Por estas razones, se ha convertido en una
herramienta popular en la comunidad de OpenStreetMap, un proyecto de código
abierto que se basa en personas editoras voluntarias para crear el mapa del
mundo.&lt;/p&gt;
&lt;iframe width="640" height="480" src="https://embed-v1.mapillary.com/embed?version=1&amp;amp;filter=%5B%22all%22%5D&amp;amp;map_filter=%5B%22all%22%5D&amp;amp;map_style=mapbox_streets&amp;amp;image_key=mlDTpI2tIa5fP_My7riHcw&amp;amp;x=0.49787228454942833&amp;amp;y=0.4727477024147648&amp;amp;client_id=WHJxWW40RWhyVGR6ajVEci1saHZNUTozZDQ5NjRmM2I4ZjBiNjc2&amp;amp;style=photo" frameborder="0"&gt;&lt;/iframe&gt;

&lt;p&gt;Algunos usos prácticos de estos datos incluyen el análisis de la infraestructura
para bicicletas a lo largo de una ciudad, reducción de riesgos antes y después de
desastres, movilidad urbana, y puntos de reunión. #CompletetheMap viene a impulsar
este estilo rápido de recolección de datos en un área específica. La idea
de #CompletetheMap es simple. El área seleccionada se divide en zonas, y personas
miembros de la comunidad local colaboran para capturar imágenes en cada zona.
Conforme el porcentaje de fotos de calles y caminos aumenta, la zona cambia de
color de rojo a naranja, y de naranja a verde.&lt;/p&gt;
&lt;p&gt;El reto #CompletetheMap empezó en mayo de este año y ya se ha realizado en ciudades
como
&lt;a href="https://mapillary.github.io/mapillary_greenhouse/ctm/brasilia/"&gt;Brasilia&lt;/a&gt;,
&lt;a href="https://mapillary.github.io/mapillary_greenhouse/challenge/moscow/"&gt;Moscú&lt;/a&gt;,
&lt;a href="https://mapillary.github.io/mapillary_greenhouse/challenge/berlin/"&gt;Berlín&lt;/a&gt; y
&lt;a href="https://mapillary.github.io/mapillary_greenhouse/challenge/ottawa/"&gt;Ottawa&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Cada una de estas ciudades ha respondido en su propia forma, reuniendo a la
comunidad y mostrando la gran cantidad de datos que incluso un pequeño grupo de
personas puede recolectar. Brasilia se ha concentrado en características de
calles y puntos de interés. Moscú se reunió para capturar fotos de algunas de
las carreteras más nuevas alrededor del centro de la ciudad. Berlín, la primera
en participar en el reto de #CompletetheMap, ayudó a prepararlo recolectando
muchas de las calles más pequeñas y rutas peatonales. Luego está Ottawa,
un #CompletetheMap centrado en infraestructura para bicicletas. En este reto,
20 personas lograron recolectar medio millón de imágenes y casi 2000 km de
cobertura nueva.&lt;/p&gt;
&lt;p&gt;El reto global le permite a cualquier persona seguir su progreso relativo a
otras alrededor del mundo, recolectando fotos en un área de 50 km2. Las
participantes pueden ganar aumentando los km de nuevas rutas que capturan, la
cantidad de imágenes que toman, y el número de participantes que se unen para
ayudarles.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://ia801202.us.archive.org/4/items/jaquerespeis-mapas/complethemap/complethemap.png"&gt;&lt;img alt="CompletetheMap" src="https://ia801202.us.archive.org/4/items/jaquerespeis-mapas/complethemap/complethemap.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Actualmente, 23 ciudades de 17 países se han registrado para el #CompletetheMap
global.&lt;/p&gt;
&lt;p&gt;Todo lo que se necesita para colaborar es un teléfono celular. Participe en el
reto descargando la aplicación de Mapillary y tomando fotos de las calles por
las que viaja. Una vez que se conecte a una red wifi, suba las imágenes y
véalas aparecer en Mapillary.com.&lt;/p&gt;
&lt;p&gt;Puede unirse a la comunidad de maperos y maperas de Costa Rica en
&lt;a href="https://www.facebook.com/maperespeis/"&gt;https://www.facebook.com/maperespeis/&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>free software</category><category>openstreetmap</category><guid>http://elopio.net/blog/completethemap/</guid><pubDate>Mon, 11 Dec 2017 02:08:35 GMT</pubDate></item><item><title>An errbot snap for simplified chatops</title><link>http://elopio.net/blog/errbot-snap/</link><dc:creator>Leo Arias</dc:creator><description>&lt;div&gt;&lt;p&gt;I'm a Quality Assurance Engineer. A big part of my job is to find problems,
then make sure that they are fixed and &lt;em&gt;automated&lt;/em&gt; so they don't regress. If I
do my job well, then our process will identify new and potential problems early
&lt;em&gt;without manual intervention&lt;/em&gt; from anybody in the team. It's like trying to
automate myself, everyday, until I'm no longer needed and have to jump to
another project.&lt;/p&gt;
&lt;p&gt;However, as we work in the project, it's unavoidable that many small manual
tasks accumulate on my hands. This happens because I set up the continuous
integration infrastructure, so I'm the one who knows more about it and have
easier access, or because I'm the one who requested access to the build farm
so I'm the one with the password, or because I configured the staging
environment and I'm the only one who knows the details. This is a great way
to achieve job security, but it doesn't lead us to higher quality. It's a job
half done, and it's terribly boring to be a bottleneck and a silo of
information about testing and the release process. All of these tasks should be
shared by the whole team, as with all the other tasks in the project.&lt;/p&gt;
&lt;p&gt;There are two problems. First, most of these tasks involve delicate credentials
that shouldn't be freely shared with everybody. Second, even if the task itself
is simple and quick to execute, it's not very simple to document how to set up
the environment to be able to execute them, nor how to make sure that the right
task is executed in the right moment.&lt;/p&gt;
&lt;p&gt;Chatops is how I like to solve all of this. The idea is that every task that
requires manual intervention is implemented in a script that can be executed by
a bot. This bot joins the communication channel where the entire team is
present, and it will execute the tasks and report about their results as a
response to external events that happen somewhere in the project
infrastructure, or as a response to the direct request of a team member in the
channel. The credentials are kept safe, they only have to be shared with the
bot and the permissions can be handled with access control lists or membership
to the channel. And the operative knowledge is shared with all the team,
because they are all listening in the same channel with the bot. This means
that anybody can execute the tasks, and the bot assists them to make it simple.&lt;/p&gt;
&lt;p&gt;In snapcraft we started writing our bot not so long ago. It's called snappy-m-o
(&lt;a href="http://pixar.wikia.com/wiki/M-O"&gt;Microbe Obliterator&lt;/a&gt;), and it's written
in python with &lt;a href="http://errbot.io/"&gt;errbot&lt;/a&gt;. We, of course, packaged it as a
snap so we have automated delivery every time we change it's source code, and
the bot is also autoupdated in the server, so in the chat we are always
interacting with the latest and greatest.&lt;/p&gt;
&lt;p&gt;Let me show you how we started it, in case you want to get your own. But let's
call this one Baymax, and let's make a virtual environment with errbot, to
experiment.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://upload.wikimedia.org/wikipedia/en/2/2c/Baymax_from_Disney%27s_Big_Hero_6.png"&gt;&lt;img alt="drawing of the Baymax bot" src="https://upload.wikimedia.org/wikipedia/en/2/2c/Baymax_from_Disney%27s_Big_Hero_6.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ mkdir -p ~/workspace/baymax
$ &lt;span class="nb"&gt;cd&lt;/span&gt; ~/workspace/baymax
$ sudo apt install python3-venv
$ python3 -m venv .venv
$ &lt;span class="nb"&gt;source&lt;/span&gt; .venv/bin/activate
$ pip install errbot
$ errbot --init
&lt;/pre&gt;


&lt;p&gt;The last command will initialize this bot with a super simple plugin, and
will configure it to work in text mode. This means that the bot won't be
listening on any channel, you can just interact with it through the command
line (the ops, without the chat). Let's try it:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ errbot
&lt;span class="o"&gt;[&lt;/span&gt;...&lt;span class="o"&gt;]&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; !help
All commands
&lt;span class="o"&gt;[&lt;/span&gt;...&lt;span class="o"&gt;]&lt;/span&gt;
!tryme - Execute to check &lt;span class="k"&gt;if&lt;/span&gt; Errbot responds to command.
&lt;span class="o"&gt;[&lt;/span&gt;...&lt;span class="o"&gt;]&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; !tryme
It works !
&amp;gt;&amp;gt;&amp;gt; !shutdown --confirm
&lt;/pre&gt;


&lt;p&gt;&lt;code&gt;tryme&lt;/code&gt; is the command provided by the example plugin that &lt;code&gt;errbot --init&lt;/code&gt;
created. Take a look at the file &lt;code&gt;plugins/err-example/example.py&lt;/code&gt;, errbot is
just lovely. In order to define your own plugin you will just need a class that
inherits from &lt;code&gt;errbot.BotPlugin&lt;/code&gt;, and the commands are methods decorated with
&lt;code&gt;@errbot.botcmd&lt;/code&gt;. I won't dig into how to write plugins, because they have an
amazing
&lt;a href="http://errbot.io/en/latest/user_guide/plugin_development/index.html"&gt;documentation about Plugin development&lt;/a&gt;.
You can also read the plugins we have in our snappy-m-o, one for
&lt;a href="https://github.com/elopio/snappy-m-o/blob/master/plugins/autopkgtest_github/autopkgtest_github.py"&gt;triggering autopkgtests on GitHub pull requests&lt;/a&gt;,
and the other for
&lt;a href="https://github.com/elopio/snappy-m-o/blob/master/plugins/snapcraft_github/snapcraft_github.py"&gt;subscribing to the results of the pull requests tests&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let's change the config of Baymax to put it in an IRC chat:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ pip install irc
&lt;/pre&gt;


&lt;p&gt;And in the &lt;code&gt;config.py&lt;/code&gt; file, set the following values:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;BACKEND = 'IRC'
BOT_IDENTITY = {
    'nickname' : 'baymax-elopio',  # Nicknames need to be unique, so append your own.
                                   # Remember to replace 'elopio' with your nick everywhere
                                   # from now on.
    'server' : 'irc.freenode.net',
}
CHATROOM_PRESENCE = ('#snappy',)
&lt;/pre&gt;


&lt;p&gt;Run it again with the errbot command, but this time join the #snappy channel
in irc.freenode.net, and write in there &lt;code&gt;!tryme&lt;/code&gt;. It works ! :)&lt;/p&gt;
&lt;p&gt;&lt;a href="https://archive.org/download/elopio-screenshots2/errbot/errbot-snap.png"&gt;&lt;img alt="screenshot of errbot on IRC" src="https://archive.org/download/elopio-screenshots2/errbot/errbot-snap.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So, this is very simple, but let's package it now to start with the good
practice of continuous delivery before it gets more complicated. As usual, it
just requires a &lt;code&gt;snapcraft.yaml&lt;/code&gt; file with all the packaging info and metadata:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;baymax&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;elopio&lt;/span&gt;
&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'0.1-dev'&lt;/span&gt;
&lt;span class="n"&gt;summary&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="n"&gt;bot&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;errbot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Chat&lt;/span&gt; &lt;span class="n"&gt;ops&lt;/span&gt; &lt;span class="n"&gt;bot&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;my&lt;/span&gt; &lt;span class="n"&gt;team&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;grade&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;stable&lt;/span&gt;
&lt;span class="n"&gt;confinement&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;strict&lt;/span&gt;

&lt;span class="n"&gt;apps&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;baymax&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;elopio&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt; &lt;span class="n"&gt;LC_ALL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;UTF&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="n"&gt;errbot&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="n"&gt;$SNAP&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;py&lt;/span&gt;
    &lt;span class="n"&gt;plugs&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;network&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;network&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;parts&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;errbot&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;plugin&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;
    &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;errbot&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;irc&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;baymax&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;
    &lt;span class="n"&gt;plugin&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;dump&lt;/span&gt;
    &lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;py&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;plugins&lt;/span&gt;
    &lt;span class="n"&gt;after&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;errbot&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;And we need to change a few more values in &lt;code&gt;config.py&lt;/code&gt; to make sure that the
bot is relocatable, that we can run it in the isolated snap environment, and
that we can add plugins after it has been installed:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="n"&gt;BOT_DATA_DIR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'SNAP_USER_DATA'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;BOT_EXTRA_PLUGIN_DIR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'SNAP'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;'plugins'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;BOT_LOG_FILE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BOT_DATA_DIR&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'/err.log'&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;One final try, this time from the snap:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt install snapcraft
$ snapcraft
$ sudo snap install baymax*.snap --dangerous
$ baymax-elopio
&lt;/pre&gt;


&lt;p&gt;And go back to IRC to check.&lt;/p&gt;
&lt;p&gt;Last thing would be to push the source code we have just written to a GitHub
repo, and enable the continuous delivery in build.snapcraft.io. Go to your
server and install the bot with &lt;code&gt;sudo snap install baymax-elopio --edge&lt;/code&gt;.
Now everytime somebody from your team makes a change in the master repo in
GitHub, the bot in your server will be automatically updated to get those
changes within a few hours without any work from your side.&lt;/p&gt;
&lt;p&gt;If you are into chatops, make sure that every time you do a manual task, you
also plan for some time to turn that task into a script that can be executed
by your bot. And get ready to enjoy tons and tons of free time, or just keep
going through those &lt;a href="https://bugs.launchpad.net/snapcraft"&gt;400 open bugs&lt;/a&gt;,
whichever you prefer :)&lt;/p&gt;&lt;/div&gt;</description><category>deployment</category><category>errbot</category><category>free software</category><category>snaps</category><category>ubuntu</category><guid>http://elopio.net/blog/errbot-snap/</guid><pubDate>Wed, 12 Jul 2017 04:31:00 GMT</pubDate></item><item><title>Deploy to all SBCs with Gobot and a single snap package</title><link>http://elopio.net/blog/gobot-snaps/</link><dc:creator>Leo Arias</dc:creator><description>&lt;div&gt;&lt;p&gt;I love playing with my prototyping boards. Here at Ubuntu we are designing
the &lt;a href="https://developer.ubuntu.com/core/get-started"&gt;core operating system&lt;/a&gt;
to support every &lt;a href="https://en.wikipedia.org/wiki/Single-board_computer"&gt;single-board computer&lt;/a&gt;,
and keep it safe, updated and simple. I've learned a lot about physical
computing, but I always have a big problem when my prototype is done, and I
want to deploy it. I am working with a
&lt;a href="https://en.wikipedia.org/wiki/Raspberry_Pi"&gt;Raspberry Pi&lt;/a&gt;, a
&lt;a href="http://www.96boards.org/product/dragonboard410c/"&gt;DragonBoard&lt;/a&gt;, and a
&lt;a href="https://en.wikipedia.org/wiki/BeagleBoard#BeagleBone_Black"&gt;BeagleBone&lt;/a&gt;. They
are all very different, with different architectures, different pins, onboard
capabilities and peripherals, and they can have different operating systems.
When I started learning about this, I had to write 3 programs that were very
different, if I wanted to try my prototype in all my boards.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://archive.org/download/snappy-gobot/20170710_174806.jpg"&gt;&lt;img alt="picture of the three different SBCs" src="https://archive.org/download/snappy-gobot/20170710_174806.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Then I found &lt;a href="https://gobot.io/"&gt;Gobot&lt;/a&gt;, a framework for robotics and IoT that
supports my three boards, and many more. With the added benefit that you can
write all the software in the lovely and clean Go language. The Ubuntu store
supports all their architectures too, and
&lt;a href="https://www.youtube.com/watch?v=b2x6mumSrpw"&gt;packaging Go projects with snapcraft&lt;/a&gt;
is super simple. So we can combine all of this to make a single snap package
that with the help of Gobot will work on every board, and deploy it to all the
users of these boards through the snaps store.&lt;/p&gt;
&lt;p&gt;Let's dig into the code with a very simple example to blink an LED, first
for the Raspberry PI only.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="s2"&gt;"time"&lt;/span&gt;

  &lt;span class="s2"&gt;"gobot.io/x/gobot"&lt;/span&gt;
  &lt;span class="s2"&gt;"gobot.io/x/gobot/drivers/gpio"&lt;/span&gt;
  &lt;span class="s2"&gt;"gobot.io/x/gobot/platforms/raspi"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;adaptor&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;raspi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewAdaptor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="n"&gt;led&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gpio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewLedDriver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;adaptor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"7"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="n"&gt;work&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;gobot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Every&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Second&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;led&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Toggle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;robot&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gobot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewRobot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"snapbot"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="n"&gt;gobot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Connection&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;adaptor&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="n"&gt;gobot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Device&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;led&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="n"&gt;work&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="n"&gt;robot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;In there you will see some of the Gobot concepts. There's an adaptor for the
board, a driver for the specific device (in this case the LED), and a robot
to control everything. In this program, there are only two things specific to
the Raspberry Pi: the adaptor and the name of the GPIO pin (&lt;code&gt;"7"&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;&lt;a href="https://ia801502.us.archive.org/32/items/snappy-gobot/20170710_214428.ogv"&gt;&lt;img alt="picture of the Raspberry Pi prototype" src="https://ia601502.us.archive.org/32/items/snappy-gobot/20170710_214439.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It works nicely in one of the boards, but let's extend the code a little to
support the other two.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="s2"&gt;"log"&lt;/span&gt;
  &lt;span class="s2"&gt;"os/exec"&lt;/span&gt;
  &lt;span class="s2"&gt;"strings"&lt;/span&gt;
  &lt;span class="s2"&gt;"time"&lt;/span&gt;

  &lt;span class="s2"&gt;"gobot.io/x/gobot"&lt;/span&gt;
  &lt;span class="s2"&gt;"gobot.io/x/gobot/drivers/gpio"&lt;/span&gt;
  &lt;span class="s2"&gt;"gobot.io/x/gobot/platforms/beaglebone"&lt;/span&gt;
  &lt;span class="s2"&gt;"gobot.io/x/gobot/platforms/dragonboard"&lt;/span&gt;
  &lt;span class="s2"&gt;"gobot.io/x/gobot/platforms/raspi"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;exec&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"uname"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"-r"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Output&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;adaptor&lt;/span&gt; &lt;span class="n"&gt;gobot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Adaptor&lt;/span&gt;
  &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;pin&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;
  &lt;span class="n"&gt;kernelRelease&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;strings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kernelRelease&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"raspi2"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;adaptor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;raspi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewAdaptor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;pin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"7"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;strings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kernelRelease&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"snapdragon"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;adaptor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dragonboard&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewAdaptor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;pin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"GPIO_A"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;adaptor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;beaglebone&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewAdaptor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;pin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"P8_7"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;digitalWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;adaptor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gpio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DigitalWriter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Invalid adaptor"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;led&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gpio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewLedDriver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;digitalWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="n"&gt;work&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;gobot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Every&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Second&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;led&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Toggle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;robot&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gobot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewRobot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"snapbot"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="n"&gt;gobot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Connection&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;adaptor&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="n"&gt;gobot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Device&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;led&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="n"&gt;work&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="n"&gt;robot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;We are basically adding in there a block to select the right adaptor and pin,
depending on which board the code is running. Now we can compile this program,
throw the binary in the board, and give it a try.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://ia801502.us.archive.org/32/items/snappy-gobot/20170710_212605.ogv"&gt;&lt;img alt="picture of the Dragonboard prototype" src="https://ia801502.us.archive.org/32/items/snappy-gobot/20170710_212602.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But we can do better. If we package this in a snap, anybody with one of the
boards and an operating system that supports snaps can easily install it. We
also open the door to
&lt;a href="https://build.snapcraft.io"&gt;continuous delivery&lt;/a&gt; and
&lt;a href="http://elopio.net/blog/ipfs-crowdtesting/"&gt;crowd testing&lt;/a&gt;. And as I said
before, super simple, just put this in the &lt;code&gt;snapcraft.yaml&lt;/code&gt; file:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;gobot&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;blink&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;elopio&lt;/span&gt;
&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt;
&lt;span class="n"&gt;summary&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;Blink&lt;/span&gt; &lt;span class="n"&gt;snap&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;Raspberry&lt;/span&gt; &lt;span class="n"&gt;Pi&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;Gobot&lt;/span&gt;
&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;simple&lt;/span&gt; &lt;span class="n"&gt;example&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;blink&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;LED&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;Raspberry&lt;/span&gt; &lt;span class="n"&gt;Pi&lt;/span&gt;
  &lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;Gobot&lt;/span&gt; &lt;span class="n"&gt;framework&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;

&lt;span class="n"&gt;confinement&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;devmode&lt;/span&gt;

&lt;span class="n"&gt;apps&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;gobot&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;blink&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;elopio&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;gobot&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;blink&lt;/span&gt;

&lt;span class="n"&gt;parts&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;gobot&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;blink&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;
    &lt;span class="n"&gt;plugin&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;go&lt;/span&gt;
    &lt;span class="n"&gt;go&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;importpath&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;com&lt;/span&gt;&lt;span class="sr"&gt;/elopio/g&lt;/span&gt;&lt;span class="n"&gt;obot&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;blink&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;To build the snap, here is a cool trick thanks to the work that
&lt;a href="http://www.twotoasts.de/index.php/2017/06/how-to-support-cross-compilation-in-plugins/"&gt;kalikiana&lt;/a&gt;
recently added to snapcraft. I'm writing this code in my development machine,
which is amd64. But the raspberry pi and beaglebone are armhf, and the
dragonboard is arm64; so I need to cross-compile the code to get binaries
for all the architectures:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;snapcraft --target-arch=armhf
snapcraft clean
snapcraft --target-arch=arm64
&lt;/pre&gt;


&lt;p&gt;That will leave two .snap files in my working directory that then I can upload
to the store with &lt;code&gt;snapcraft push&lt;/code&gt;. Or I can just push the code to GitHub and
let &lt;a href="https://build.snapcraft.io"&gt;build.snapcraft.io&lt;/a&gt; to take care of building
and pushing for me.&lt;/p&gt;
&lt;p&gt;Here is the source code for this simple example:
&lt;a href="https://github.com/elopio/gobot-blink"&gt;https://github.com/elopio/gobot-blink&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Of course, Gobot supports many more devices that will let you build complex
robots. Just take a look at the
&lt;a href="https://gobot.io/documentation/"&gt;documentation in the Gobot site&lt;/a&gt;, and at the
&lt;a href="https://gobot.io/documentation/guides/snapcraft/"&gt;guide about deployable packages with Gobot and snapcraft&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://ia801502.us.archive.org/32/items/snappy-gobot/20170710_233319.ogv"&gt;&lt;img alt="picture of the BeagleBone prototype" src="https://ia601502.us.archive.org/32/items/snappy-gobot/20170710_233317.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you have one of the boards I'm using here to play, give it a try:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;sudo snap install gobot-blink-elopio --edge --devmode
sudo gobot-blink-elopio
&lt;/pre&gt;


&lt;p&gt;Now my experiments will be to try make the snap more secure, with strict
confinement. If you have any questions or want to help, we have a
&lt;a href="https://forum.snapcraft.io/t/write-your-robots-in-go-with-gobot-and-distribute-the-software-as-snaps/1086"&gt;topic in the forum&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;</description><category>deployment</category><category>free software</category><category>gobot</category><category>snaps</category><category>ubuntu</category><guid>http://elopio.net/blog/gobot-snaps/</guid><pubDate>Tue, 11 Jul 2017 14:30:00 GMT</pubDate></item><item><title>User acceptance testing of snaps, with Travis</title><link>http://elopio.net/blog/travis-snap-testing/</link><dc:creator>Leo Arias</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;a href="https://travis-ci.org/"&gt;Travis CI&lt;/a&gt; offers a great continuous integration
service for the projects hosted on GitHub. With it, you can run tests, deliver
artifacts and deploy applications every time you push a commit, on pull requests, after they are merged, or with some other frequency.&lt;/p&gt;
&lt;p&gt;Last week Travis CI
&lt;a href="https://blog.travis-ci.com/2017-06-21-trusty-updates-2017-Q2-launch"&gt;updated the Ubuntu 14.04 (Trusty) machines&lt;/a&gt;
that run your tests and deployment steps. This update came with a nice surprise for everybody
working to deliver software to Linux users, because it is now possible to
install &lt;a href="https://snapcraft.io"&gt;snaps&lt;/a&gt; in Travis!&lt;/p&gt;
&lt;p&gt;I've been excited all week telling people about all the doors that this opens;
but if you have been following my adventures in the Ubuntu world, by now you
can probably guess that I'm mostly thinking about all the potential this has
for automated testing. For the automation of user acceptance tests.&lt;/p&gt;
&lt;p&gt;User acceptance tests are executed from the point of view of the user, with
your software presented as a black box to them. The tests can only interact
with the software through the entry points you define for your users. If it's
a CLI application, then the tests will call commands and subcommands and check
the outputs. If it's a website or a desktop application, the tests will click
things, enter text and check the changes on this GUI. If it's a service with
an HTTP API, the tests will make requests and check the responses. On these
tests, the closer you can get to simulate the environment and behaviour of your
real users, the better.&lt;/p&gt;
&lt;p&gt;Snaps are great for the automation of user acceptance tests because they are
immutable and they bundle all their dependencies. With this we can make sure
that your snap will work the same on any of the operating systems and
architectures that support snaps. The &lt;a href="https://snapcraft.io/docs/core/snapd"&gt;snapd&lt;/a&gt; service takes care of hiding
the differences and presenting a consistent execution environment for the snap.
So, getting a green execution of these tests in the Trusty machine of Travis is
a pretty good indication that it will work on all the active releases of
Ubuntu, Debian, Fedora and even on a Raspberry Pi.&lt;/p&gt;
&lt;p&gt;Let me show you an example of what I'm talking about, obviously using my
favourite snap called IPFS. There is
&lt;a href="http://elopio.net/blog/ipfs-crowdtesting/"&gt;more information about IPFS in my previous post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Check below the packaging metadata for the IPFS snap, a single &lt;code&gt;snapcraft.yaml&lt;/code&gt;
file:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ipfs&lt;/span&gt;
&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt;
&lt;span class="n"&gt;summary&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;global&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;versioned&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;peer&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;peer&lt;/span&gt; &lt;span class="n"&gt;filesystem&lt;/span&gt;
&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;IPFS&lt;/span&gt; &lt;span class="n"&gt;combines&lt;/span&gt; &lt;span class="n"&gt;good&lt;/span&gt; &lt;span class="n"&gt;ideas&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;Git&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BitTorrent&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Kademlia&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SFS&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;Web&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
  &lt;span class="n"&gt;It&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;like&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;single&lt;/span&gt; &lt;span class="n"&gt;bittorrent&lt;/span&gt; &lt;span class="n"&gt;swarm&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exchanging&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;IPFS&lt;/span&gt; &lt;span class="n"&gt;provides&lt;/span&gt;
  &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;simple&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;HTTP&lt;/span&gt; &lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;but&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;permanence&lt;/span&gt; &lt;span class="n"&gt;built&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;You&lt;/span&gt;
  &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="n"&gt;also&lt;/span&gt; &lt;span class="n"&gt;mount&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;world&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ipfs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;confinement&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;strict&lt;/span&gt;

&lt;span class="n"&gt;apps&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;ipfs&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ipfs&lt;/span&gt;
    &lt;span class="n"&gt;plugs&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;network&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;network&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;parts&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;ipfs&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;com&lt;/span&gt;&lt;span class="sr"&gt;/ipfs/g&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ipfs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;git&lt;/span&gt;
    &lt;span class="n"&gt;plugin&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;nil&lt;/span&gt;
    &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;make&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wget&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;prepare&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="n"&gt;mkdir&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;../&lt;/span&gt;&lt;span class="n"&gt;go&lt;/span&gt;&lt;span class="sr"&gt;/src/github.com/ipfs/g&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ipfs&lt;/span&gt;
      &lt;span class="n"&gt;cp&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;../&lt;/span&gt;&lt;span class="n"&gt;go&lt;/span&gt;&lt;span class="sr"&gt;/src/github.com/ipfs/g&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ipfs&lt;/span&gt;
    &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="n"&gt;env&lt;/span&gt; &lt;span class="n"&gt;GOPATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pwd&lt;/span&gt;&lt;span class="o"&gt;)/../&lt;/span&gt;&lt;span class="n"&gt;go&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;../&lt;/span&gt;&lt;span class="n"&gt;go&lt;/span&gt;&lt;span class="sr"&gt;/src/github.com/ipfs/g&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ipfs&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt;
    &lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="n"&gt;mkdir&lt;/span&gt; &lt;span class="n"&gt;$SNAPCRAFT_PART_INSTALL&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;
      &lt;span class="n"&gt;mv&lt;/span&gt; &lt;span class="o"&gt;../&lt;/span&gt;&lt;span class="n"&gt;go&lt;/span&gt;&lt;span class="sr"&gt;/bin/ipfs $SNAPCRAFT_PART_INSTALL/bin/&lt;/span&gt;
    &lt;span class="n"&gt;after&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;go&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;go&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;go1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;7.5&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;It's not the most simple snap because they use their own build tool to get the
go dependencies and compile; but it's also not too complex. If you are new to
snaps and want to understand every detail of this file, or you want to package
your own project, the
&lt;a href="https://tutorials.ubuntu.com/tutorial/create-first-snap"&gt;tutorial to create your first snap&lt;/a&gt;
is a good place to start.&lt;/p&gt;
&lt;p&gt;What's important here is that if you run &lt;code&gt;snapcraft&lt;/code&gt; using the snapcraft.yaml file above, you
will get the IPFS snap. If you install that snap, then you can test it from the
point of view of the user. And if the tests work well, you can push it to the
edge channel of the Ubuntu store to start the crowdtesting with your community.&lt;/p&gt;
&lt;p&gt;We can automate all of this with Travis. The &lt;code&gt;snapcraft.yaml&lt;/code&gt; for the project
must be already in the GitHub repository, and we will add there a &lt;code&gt;.travis.yml&lt;/code&gt;
file. They have
&lt;a href="https://docs.travis-ci.com/"&gt;good docs to prepare your Travis account&lt;/a&gt;.
First, let's see what's required to build the snap:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;sudo&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;required&lt;/span&gt;
&lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;docker&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;docker&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pwd&lt;/span&gt;&lt;span class="o"&gt;):&lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pwd&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pwd&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;snapcore&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;snapcraft&lt;/span&gt; &lt;span class="n"&gt;sh&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="s2"&gt;"apt update &amp;amp;&amp;amp; snapcraft"&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;For now, we build the snap in a docker container to keep things simple. We have
work in progress to be able to install snapcraft in Trusty as a snap, so soon
this will be even nicer running everything directly in the Travis machine.&lt;/p&gt;
&lt;p&gt;This previous step will leave the packaged .snap file in the current directory.
So we can install it adding a few more steps to the Travis script:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[...]&lt;/span&gt;

&lt;span class="na"&gt;script:&lt;/span&gt;
  &lt;span class="na"&gt;- docker [...]&lt;/span&gt;
  &lt;span class="na"&gt;- sudo apt install --yes snapd&lt;/span&gt;
  &lt;span class="na"&gt;- sudo snap install *.snap --dangerous&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;And once the snap is installed, we can run it and check that it works as expected.
Those checks are our automated user acceptance test. IPFS has a CLI
client, so we can just run commands and verify outputs with grep. Or we can get
fancier using &lt;a href="https://github.com/kward/shunit2"&gt;shunit2&lt;/a&gt; or
&lt;a href="https://github.com/sstephenson/bats/"&gt;bats&lt;/a&gt;. But the basic idea would be to
add to the Travis script something like this:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[...]&lt;/span&gt;

&lt;span class="na"&gt;script:&lt;/span&gt;
  &lt;span class="k"&gt;[...]&lt;/span&gt;
  &lt;span class="na"&gt;- /snap/bin/ipfs init&lt;/span&gt;
  &lt;span class="na"&gt;- /snap/bin/ipfs cat /ipfs/QmVLDAhCY3X9P2uRudKAryuQFPM5zqA3Yij1dY8FpGbL7T/readme | grep -z "^Hello and Welcome to IPFS!.*$"&lt;/span&gt;
  &lt;span class="na"&gt;- [...]&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;If one of those checks fail, Travis will mark the execution as failed and stop
our release process until we fix them. If instead, all of the checks pass, then this version
is good enough to put into the store, where people can take it and run
exploratory tests to try to find problems caused by weird scenarios that we
missed in the automation. To help with that we have the
&lt;code&gt;snapcraft enable-ci travis&lt;/code&gt; command, and a tutorial to guide you
step by step
&lt;a href="https://tutorials.ubuntu.com/tutorial/continuous-snap-delivery-from-travis-ci#0"&gt;setting up the continuous delivery from Travis CI&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For the IPFS snap we had for a long time a manual smoke suite, that our amazing
&lt;a href="https://forum.snapcraft.io/t/call-for-testing-ipfs/97"&gt;community of testers&lt;/a&gt;
have been executing over and over again, every time we want to publish a new
release. I've turned it into
&lt;a href="https://github.com/elopio/ipfs-snap/blob/master/tests/smoke_test.sh"&gt;a simple bash script&lt;/a&gt;
that from now on will be executed frequently by Travis, and will tell us if
there's something wrong before anybody gives it a try manually. With this our
community of testers will have more time to run new and interesting scenarios,
trying to break the application in clever ways, instead of running the same
repetitive steps many times.&lt;/p&gt;
&lt;p&gt;Thanks to Travis and snapcraft we no longer have to worry about a big part of
or release process. Continuous integration and delivery can be fully automated,
and we will have to take a look only when something breaks.&lt;/p&gt;
&lt;p&gt;As for IPFS, it will keep being my guinea pig to guide new features for
snapcraft and showcase them when ready. It has many more commands that
have to be added to the automated test suite, and it also has a web UI and
an HTTP API. Lots of things to play with! If you would like to help, and
on the way learn about snaps, automation and the decentralized web, please
let me know. You can take a look on my
&lt;a href="https://github.com/elopio/ipfs-snap"&gt;IPFS snap repo&lt;/a&gt; for more details about
testing snaps in Travis, and other tricks for the build and deployment.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://archive.org/download/elopio-screenshots2/travis/ipsf-travis.png"&gt;&lt;img alt="screenshot of the IPFS smoke test running in travis" src="https://archive.org/download/elopio-screenshots2/travis/ipsf-travis.png"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>free software</category><category>snaps</category><category>testing</category><category>travis</category><category>ubuntu</category><guid>http://elopio.net/blog/travis-snap-testing/</guid><pubDate>Thu, 29 Jun 2017 03:51:00 GMT</pubDate></item><item><title>Crowdtesting with the Ubuntu community: the case of IPFS</title><link>http://elopio.net/blog/ipfs-crowdtesting/</link><dc:creator>Leo Arias</dc:creator><description>&lt;div&gt;&lt;p&gt;Here at Ubuntu we are working hard on the future of free software distribution.
We want developers to release their software to any Linux distro in a way
that's safe, simple and flexible. You can read more about this at
&lt;a href="https://snapcraft.io/"&gt;snapcraft.io&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This work is extremely fun because we have to work constantly with a wild
variety of free software projects to make sure that the tools we write are
usable and that the workflow we are proposing makes sense to developers and
gives them a lot of value in return. Today I want to talk about one of those
projects: IPFS.&lt;/p&gt;
&lt;p&gt;IPFS is the permanent and decentralized web. How cool is that? You get a
peer-to-peer distributed file system where you store and retrieve files. They
have a nice demo &lt;a href="https://ipfs.io/"&gt;in their website&lt;/a&gt;, and you can give it a
try on Ubuntu Trusty, Xenial or later by running:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ sudo snap install ipfs
&lt;/pre&gt;


&lt;p&gt;&lt;a href="https://archive.org/download/elopio-screenshots2/ipfs-peers.png"&gt;&lt;img alt="screenshot of the IPFS peers" src="https://archive.org/download/elopio-screenshots2/ipfs-peers.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So, here's one of the problems we are trying to solve. We have millions of users
on the Trusty version of Ubuntu, released during 2014. We also have millions of
users on the Xenial version, released during 2016. Those two versions are stable
now, and following the Ubuntu policies, they will get only security updates for
5 years. That means that it's very hard, almost impossible, for a young project
like IPFS to get into the Ubuntu archives for those releases. There will be no
simple way for all those users to enjoy IPFS, they would have to use a
&lt;a href="https://en.wikipedia.org/wiki/Personal_Package_Archive"&gt;Personal Package Archive&lt;/a&gt;
or install the software from a
&lt;a href="https://en.wikipedia.org/wiki/Tar_(computing)"&gt;tarball&lt;/a&gt;. Both methods are
complex with high security risks, and both require the users to put a lot of
trust on the developers, more than what they should ever trust anybody.&lt;/p&gt;
&lt;p&gt;We are closing the Zesty release cycle which will go out in April, so it's
too late there too. IPFS could make a
&lt;a href="https://en.wikipedia.org/wiki/Deb_(file_format)"&gt;deb&lt;/a&gt;, put it into Debian,
wait for it to sync to Ubuntu, and then it's likely that it will be ready for
the October release. Aside from the fact that we have to wait until October,
there are a few other problems. First, making a deb is not simple. It's not
too hard either, but it requires quite some time to learn to do it right.
Second, I mentioned that IPFS is young, they are on the 0.4.6 version. So, it's
very unlikely that they will want to support this early version for such a long
time as Debian and Ubuntu require. And they are not only young, they are also
fast. They add new features and bug fixes every day and make new releases almost
every week, so they need a feedback loop that's just as fast. A 6 months release
cycle is way too slow. That works nicely for some kinds of free software
projects, but not for one like IPFS.&lt;/p&gt;
&lt;p&gt;They have been kind enough to let me play with their project and use it as a
test subject to verify our end-to-end workflow. My passion is testing, so I have
been focusing on continuous delivery to get happy early adopters and constant
feedback about the most recent changes in the project.&lt;/p&gt;
&lt;p&gt;I started by making a
&lt;a href="https://github.com/elopio/ipfs-snap/blob/master/snapcraft.yaml"&gt;snapcraft.yaml&lt;/a&gt;
file that contains all the metadata required for the snap package. The file is
pretty simple and to make the first version it took me just a couple of minutes,
true story. Since then I've been slowly improving and updating it with small
changes. If you are interested in doing the same for your project, you can read
&lt;a href="https://tutorials.ubuntu.com/tutorial/create-first-snap"&gt;the tutorial to create a snap&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I built and tested this snap locally on my machines. It worked nicely, so I
pushed it to the edge channel of the Ubuntu Store. Here, the snap is not visible
on user searches, only the people who know about the snap will be able to
install it. I told a couple of my friends to give it a try, and they came back
telling me how cool IPFS was. Great choice for my first test subject, no
doubt.&lt;/p&gt;
&lt;p&gt;At this point, following the pace of the project by manually building and
pushing new versions to the store was too demanding, they go too fast. So, I
started working on continuous delivery by translating everything I did manually
into scripts and hooking them to travis-ci. After a few days, it got pretty
fancy, take a look at
&lt;a href="https://github.com/elopio/ipfs-snap"&gt;the github repo of the IPFS snap&lt;/a&gt; if you
are curious. Every day, a new version is packaged from the latest state of the
master branch of IPFS and it is pushed to the edge channel, so we have a constant
flow of new releases for hardcore early adopters. After they install IPFS from
the edge channel once, the package will be automatically updated in their
machines every day, so they don't have to do anything else, just use IPFS as
they normally would.&lt;/p&gt;
&lt;p&gt;Now with this constant stream of updates, me and my two friends were not enough
to validate all the new features. We could never be sure if the project was
stable enough to be pushed to the stable channel and make it available to the
millions and millions of Ubuntu users out there.&lt;/p&gt;
&lt;p&gt;Luckily, the Ubuntu community is huge, and they are very nice people. It was
time to use the wisdom of the crowds. I invited the most brave of them to keep
the snap installed from edge and I defined a simple pipeline that leads to the
stable release using the four available channels in the Ubuntu store:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When a revision is tagged in the IPFS master repo, it is automatically pushed
   to edge channel from travis, just as with any other revision.&lt;/li&gt;
&lt;li&gt;Travis notifies me about this revision.&lt;/li&gt;
&lt;li&gt;I install this tagged revision from edge, and run a super quick test to make
   sure that the IPFS server starts.&lt;/li&gt;
&lt;li&gt;If it starts, I push the snap to the beta channel.&lt;/li&gt;
&lt;li&gt;With a couple of my friends, we run a
   &lt;a href="https://gist.github.com/elopio/7492a28bd1aef6c4a86b5dcf5d5cb65b#file-ipfs-smoke-tests-md"&gt;suite of smoke tests&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;If everything goes well, I push the snap to the candidate channel.&lt;/li&gt;
&lt;li&gt;I notify the community of Ubuntu testers about a new version in the candidate
   channel. This is were the magic of crowd testing happens.&lt;/li&gt;
&lt;li&gt;The Ubuntu testers run the smoke tests in all their machines, which gives us
   the confidence we need because we are confirming that the new version works
   on different platforms, distros, distro releases, countries, network
   topologies, you name it.&lt;/li&gt;
&lt;li&gt;This candidate release is left for some time in this channel, to let the
   community run thorough exploratory tests, trying to find weird usage
   combinations that could break the software.&lt;/li&gt;
&lt;li&gt;If the tag was for a final upstream release, the community also runs
   &lt;a href="https://gist.github.com/elopio/7492a28bd1aef6c4a86b5dcf5d5cb65b#file-ipfs-update-tests-md"&gt;update tests&lt;/a&gt;
   to make sure that the users with the stable snap installed will get this new
   version without issues.&lt;/li&gt;
&lt;li&gt;After all the problems found by the community have been resolved or at least
   acknowledged and triaged as not blockers, I move the snap from candidate
   to the stable channel.&lt;/li&gt;
&lt;li&gt;All the users following the stable channel will automatically get a very well
   tested version, thanks to the community who contributed with the testing and
   accepted a higher level of risk.&lt;/li&gt;
&lt;li&gt;And we start again, the never-ending cycle of making free software :)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now, let's go back to the discussion about trust. Debian and Ubuntu, and most of
the other distros, rely on maintainers and distro developers to package and
review every change on the software that they put in their archives. That is
a lot of work, and it slows down the feedback loop a lot, as we have seen. In
here we automated most of the tasks of a distro maintainer, and the new
revisions can be delivered directly to the users without any reviews. So the
users are trusting directly their upstream developers without intermediaries,
but it's very different from the previously existing and unsafe methods. The
code of snaps is installed read-only, very well constrained with access only to
their own safe space. Any other access needs to be declared by the snap, and
the user is always in control of which access is permitted to the application.&lt;/p&gt;
&lt;p&gt;This way upstream developers can go faster but without exposing their users to
unnecessary risks. And they just need a simple snapcraft.yaml file and to define
their own continuous delivery pipeline, on their own timeline.&lt;/p&gt;
&lt;p&gt;By removing the distro as the intermediary between the developers and their
users, we are also making a new world full of possibilities for the Ubuntu
community. Now they can collaborate constantly and directly with upstream
developers, closing this quick feedback loop. In the future we will tell our
children of the good old days when we had to report a bug in Ubuntu, which
would be copied to Debian, then sent upstream to the developers, and after 6
months, the fix would arrive. It was fun, and it lead us to where we are today,
but I will not miss it at all.&lt;/p&gt;
&lt;p&gt;Finally, what's next for IPFS? After this experiment we got more than 200
unique testers and almost 300 test installs. I now have great confidence on
this workflow, new revisions were delivered on time, existing Ubuntu
testers became new IPFS contributors and I now can safely recommend IPFS
users to install the stable snap. But there's still plenty of work ahead.
There are still manual steps in the pipeline that can be scripted, the smoke
tests can be automated to leave more free time for exploratory testing, we can
release also to armhf and arm64 architectures to get IPFS into the
&lt;a href="https://www.ubuntu.com/internet-of-things"&gt;IoT world&lt;/a&gt;, and well, of course the
developers are not stopping, they keep releasing new interesting features. As I
said, plenty of opportunities for us as distro contributors.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://archive.org/download/elopio-screenshots2/ipfs-stats.png"&gt;&lt;img alt="screenshot of the IPFS snap stats" src="https://archive.org/download/elopio-screenshots2/ipfs-stats.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I'd like to thank everybody who tested the IPFS snap, specially the following
people for their help and feedback:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;freekvh&lt;/li&gt;
&lt;li&gt;urcminister&lt;/li&gt;
&lt;li&gt;Carla Sella&lt;/li&gt;
&lt;li&gt;casept&lt;/li&gt;
&lt;li&gt;Colin Law&lt;/li&gt;
&lt;li&gt;ventrical&lt;/li&gt;
&lt;li&gt;cariboo&lt;/li&gt;
&lt;li&gt;howefield&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;lt;3&lt;/p&gt;
&lt;p&gt;If you want to release your project to the Ubuntu store, take a look at the
&lt;a href="https://snapcraft.io/"&gt;snapcraft docs&lt;/a&gt;, the
&lt;a href="https://tutorials.ubuntu.com/"&gt;Ubuntu tutorials&lt;/a&gt;, and come talk to us in
&lt;a href="https://rocket.ubuntu.com/channel/snapcraft"&gt;Rocket Chat&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;</description><category>free software</category><category>testing</category><category>ubuntu</category><guid>http://elopio.net/blog/ipfs-crowdtesting/</guid><pubDate>Mon, 06 Mar 2017 16:36:00 GMT</pubDate></item><item><title>Mapperspace #2: Poas Volcano</title><link>http://elopio.net/blog/mapperspace-poas/</link><dc:creator>Leo Arias</dc:creator><description>&lt;div&gt;&lt;p&gt;Last Sunday we went to the
&lt;a href="https://en.wikipedia.org/wiki/Po%C3%A1s_Volcano"&gt;Poás Volcano&lt;/a&gt;
to make free maps.&lt;/p&gt;
&lt;iframe width="640" height="480" src="https://embed-v1.mapillary.com/embed?version=1&amp;amp;filter=%5B%22all%22%5D&amp;amp;map_filter=%5B%22all%22%5D&amp;amp;image_key=BHp7eM8RAbbhkLWc6XyR6g&amp;amp;client_id=WHJxWW40RWhyVGR6ajVEci1saHZNUTozZDQ5NjRmM2I4ZjBiNjc2&amp;amp;style=photo" frameborder="0"&gt;&lt;/iframe&gt;

&lt;p&gt;This is the second geek outing of the JaquerEspéis. From the first one we
learned that we had to wait until summer because
&lt;a href="https://archive.org/download/jaquerespeis-mapas/photo484953803566260.jpg"&gt;it's not possible to make maps during a storm&lt;/a&gt;.
And the day was perfect. It wasn't just sunny, but the crater was totally clear
and thus we could add a new spot of Costa Rica to the virtual tour.&lt;/p&gt;
&lt;p&gt;In addition to that, this time we arrived much better prepared, with multiple
phones with &lt;a href="https://www.mapillary.com/"&gt;mapillary&lt;/a&gt;,
&lt;a href="http://osmand.net/"&gt;osmand&lt;/a&gt; and
&lt;a href="http://wiki.openstreetmap.org/wiki/OSMTracker_(Android)"&gt;OSMTracker&lt;/a&gt;, a
&lt;a href="https://theta360.com/en/"&gt;360 cam&lt;/a&gt;, a
&lt;a href="https://buy.garmin.com/en-US/US/p/140022"&gt;Garmin GPS&lt;/a&gt;, a drone and even
&lt;a href="https://twitter.com/elotrojames"&gt;a notebook&lt;/a&gt; and two biologists.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://archive.org/download/maperespeis-poas/image20170226_104505408.jpg"&gt;&lt;img alt="The procession of the MapperSpace" src="https://archive.org/download/maperespeis-poas/image20170226_104505408.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here's how it works. Everybody with the GPS in the phone activated waits until
it finds the location. Then, each person uses the application of his preference
to collect data: pictures, audio, video, text notes,
&lt;a href="https://en.wikipedia.org/wiki/GPS_eXchange_Format"&gt;traces&lt;/a&gt;, annotations in the
notebook...&lt;/p&gt;
&lt;p&gt;Later, in our homes, we upload, publish and share all the collected data. These
is useful to improve the free maps of
&lt;a href="https://en.wikipedia.org/wiki/OpenStreetMap"&gt;OpenStreetMap&lt;/a&gt;. We add from
really simple things like
&lt;a href="https://archive.org/download/maperespeis-poas/20170226_105554.jpg"&gt;the location of a trash bin&lt;/a&gt;
to really important things like how accessible is the place for a person in a
wheelchair, together with the location of all the accesses or the places that
have a lack of them. Each person improves the map a little, in the region that
he knows or passed by. With more than 3 million users, OpenStreetMap is the
best map of the world that exists; and it has a particular importance in
regions like ours, without a lot of economic potential for the
&lt;a href="https://en.wikipedia.org/wiki/Don't_be_evil#The_End_of_.22Don.27t_Be_Evil.22"&gt;megacorporations that make and sell closed maps stealing private data from their users&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Because the maps we make are free, what comes next has no limits. There are
groups working on the reconstruction of 3D models from the pictures, on the
identification and interpretation of signs, on applications to calculate the
optimal route to reach any place using any combination of means of
transportation, on applications to assist decission making during the design of
the future of a city, and many other things. All of this based on shared
knowledge and community.&lt;/p&gt;
&lt;iframe width="800" height="600" src="https://embed-v1.mapillary.com/embed?version=1&amp;amp;filter=%5B%22all%22%5D&amp;amp;map_filter=%5B%22all%22%5D&amp;amp;image_key=dYPJnZINW7nHTEgJ7g9OEA&amp;amp;client_id=WHJxWW40RWhyVGR6ajVEci1saHZNUTozZDQ5NjRmM2I4ZjBiNjc2&amp;amp;style=classic" frameborder="0"&gt;&lt;/iframe&gt;

&lt;p&gt;The image above is the virtual tour in
Mapillary. As we recorded it with the 360 cam, you can click and drag with the
mouse to see all the angles. You can also click above, in the play button to
follow the path we took. Or you can click in any of the green dots in the map
to follow your own path.&lt;/p&gt;
&lt;p&gt;Thank you very much to everybody who joined us, specially to Denisse and
Charles for being our guides, and for filling up the trip with interesting
information about flora, fauna, geology and historic importance of El Poás.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://archive.org/download/maperespeis-poas/20170226_110006.jpg"&gt;&lt;img alt="Miembros del MaperEspeis" src="https://archive.org/download/maperespeis-poas/20170226_110006.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(&lt;a href="https://archive.org/details/maperespeis-poas"&gt;More pictures and videos here&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;The next MapperSpace will be on march the 12th.&lt;/p&gt;&lt;/div&gt;</description><category>free software</category><category>openstreetmap</category><guid>http://elopio.net/blog/mapperspace-poas/</guid><pubDate>Wed, 01 Mar 2017 03:23:35 GMT</pubDate></item><item><title>Call for testing: MySQL</title><link>http://elopio.net/blog/call-for-testing-mysql/</link><dc:creator>Leo Arias</dc:creator><description>&lt;div&gt;&lt;p&gt;I promised that more interesting things were going to be available soon for
testing in Ubuntu. There's plenty coming, but today here is one of the
greatest:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ sudo snap install mysql --channel&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;.0/beta
&lt;/pre&gt;


&lt;p&gt;&lt;a href="https://archive.org/download/elopio-screenshots2/Screenshot_ubuntu-xenial-20170228_2017-02-28_093217.png"&gt;&lt;img alt="screenshot of mysql snap running" src="https://archive.org/download/elopio-screenshots2/Screenshot_ubuntu-xenial-20170228_2017-02-28_093217.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Lars Tangvald and other people at MySQL have been working on this snap for some
time, and now they are ready to give it to the community for crowd testing. If
you have some minutes, please give them a hand.&lt;/p&gt;
&lt;p&gt;We have a
&lt;a href="https://gist.github.com/elopio/c868bc68bf8640b0b49b39aeb1fae8f5"&gt;testing guide&lt;/a&gt;
to help you getting started.&lt;/p&gt;
&lt;p&gt;Remember that this should run in trusty, xenial, yakkety, zesty and in all
flavours of Ubuntu. It would be great to get a diverse pool of platforms and
test it everywhere.&lt;/p&gt;
&lt;p&gt;In here we are introducing a new concept:
&lt;a href="https://snapcraft.io/docs/reference/channels"&gt;tracks&lt;/a&gt;. Notice that we are
using &lt;code&gt;--channel=8.0/beta&lt;/code&gt;, instead of only &lt;code&gt;--beta&lt;/code&gt; as we used to do before.
That's because mysql has two different major versions currently active. In order
to try the other one:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ sudo snap install mysql --channel&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;.7/beta
&lt;/pre&gt;


&lt;p&gt;Please report back your results. Any kind of feedback will be highly appreciated,
and if you have doubts or need a hand to get started, I'm hanging around in
&lt;a href="https://rocket.ubuntu.com/channel/community"&gt;Rocket Chat&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;</description><category>free software</category><category>testing</category><category>ubuntu</category><guid>http://elopio.net/blog/call-for-testing-mysql/</guid><pubDate>Tue, 28 Feb 2017 17:40:00 GMT</pubDate></item><item><title>Call for testing: snaps in Trusty</title><link>http://elopio.net/blog/call-for-testing-trusty-snaps/</link><dc:creator>Leo Arias</dc:creator><description>&lt;div&gt;&lt;p&gt;There is a huge announcement coming: snaps now run in Ubuntu 14.04 Trusty Tahr.&lt;/p&gt;
&lt;p&gt;Take a moment to note how big this is. Ubuntu 14.04 is a long-term release that
will be supported until 2019. Ubuntu 16.04 is also a long-term release that
will be supported until 2021. We have many many many users in both releases,
some of which will stay there until we drop the support. Before this snappy new
world, all those users were stuck with the versions of all their programs
released in 2014 or 2016, getting only updates for security and critical
issues. Just try to remember how your favorite program looked 5 years ago;
maybe it didn't even exist. We were used to choose between stability and cool
new features.&lt;/p&gt;
&lt;p&gt;Well, a new world is possible. With snaps you can have a stable base system
with frequent updates for every program, without the risk of breaking your
machine. And now if you are a Trusty user, you can just start taking advantage
of all this. If you are a developer, you have to prepare only one release and
it will just work in all the supported Ubuntu releases.&lt;/p&gt;
&lt;p&gt;Awesome, right? The Ubuntu devs have been doing a great job. snapd has already
landed in the Trusty archive, and we have been running many manual and
automated tests on it. So we would like now to invite the community to test it,
explore weird paths, try to break it. We will appreciate it very much, but all
of those Trusty users out there will love it, when they receive loads of new
high quality free software on their oldie machines.&lt;/p&gt;
&lt;p&gt;So, how to get started?&lt;/p&gt;
&lt;p&gt;If you are already running Trusty, you will just have to install snapd:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo apt install snapd
&lt;/pre&gt;


&lt;p&gt;Reboot your system after that in case you had a kernel update pending, and to
get the paths for the new snap binaries set up.&lt;/p&gt;
&lt;p&gt;If you are running a different Ubuntu release, you can
&lt;a href="http://elopio.net/blog/install-ubuntu-in-vm/"&gt;Install Ubuntu in a virtual machine&lt;/a&gt;.
Just make sure that you install the
&lt;a href="http://elopio.net/blog/call-for-testing-trusty-snaps/14.04%20iso"&gt;http://releases.ubuntu.com/14.04/ubuntu-14.04.5-desktop-amd64.iso&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once you have Trusty with snapd ready, try a few commands:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ snap list
$ sudo snap install hello-world
$ hello-world
$ snap find something
&lt;/pre&gt;


&lt;p&gt;&lt;a href="https://archive.org/download/elopio-screenshots2/trusty/trusty-snaps-bigger.png"&gt;&lt;img alt="screenshot of snaps running in Trusty" src="https://archive.org/download/elopio-screenshots2/trusty/trusty-snaps-bigger.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Keep searching for snaps until you find one that's interesting. Install it,
try it, and let us know how it goes.&lt;/p&gt;
&lt;p&gt;If you find something wrong, please
&lt;a href="https://bugs.launchpad.net/snapd/+filebug"&gt;report a bug&lt;/a&gt; with the &lt;code&gt;trusty&lt;/code&gt;
tag. If you are new to the Ubuntu community or get lost on the way, come and
join us in &lt;a href="https://rocket.ubuntu.com/channel/community"&gt;Rocket Chat&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And after a good session of testing, sit down, relax, and get ohmygiraffe. With
love from &lt;a href="https://twitter.com/popey"&gt;popey&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ sudo snap install ohmygiraffe
$ ohmygiraffe
&lt;/pre&gt;


&lt;p&gt;&lt;a href="https://archive.org/download/elopio-screenshots2/trusty/ohmygiraffe.png"&gt;&lt;img alt="screenshot of ohmygiraffe" src="https://archive.org/download/elopio-screenshots2/trusty/ohmygiraffe.png"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>free software</category><category>testing</category><category>ubuntu</category><guid>http://elopio.net/blog/call-for-testing-trusty-snaps/</guid><pubDate>Fri, 10 Feb 2017 14:00:00 GMT</pubDate></item><item><title>Ubuntu Testing Day wrap up - Ubuntu Core and QEMU (20170203)</title><link>http://elopio.net/blog/ubuntu-testing-day-wrap-up-20170203/</link><dc:creator>Leo Arias</dc:creator><description>&lt;div&gt;&lt;p&gt;After a little break, on the first Friday of February we resumed the Ubuntu
Testing Days.&lt;/p&gt;
&lt;p&gt;This session was pretty interesting, because after setting some of the bases
last year we are now ready to dig deep into the most important projects that
will define the future of Ubuntu.&lt;/p&gt;
&lt;p&gt;We talked about Ubuntu Core, a snap package that is the base of the operating
system. Because it is a snap, it gets the same benefits as all the other snaps:
automatic updates, rollbacks in case of error during installation, read-only
mount of the code, isolation from other snaps, multiple channels on the store
for different levels of stability, etc.&lt;/p&gt;
&lt;p&gt;The features, philosophy and future of Core were presented by
&lt;a href="https://mvogt.wordpress.com/"&gt;Michael Vogt&lt;/a&gt; and
&lt;a href="https://twitter.com/zygoon"&gt;Zygmunt Krynicki&lt;/a&gt;, and then
&lt;a href="https://twitter.com/frgnieto"&gt;Federico Giménez&lt;/a&gt; did a great demo of how to
create an image and test it in QEMU.&lt;/p&gt;
&lt;p&gt;Click the image below to watch the full session.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=nBfAmCZMXQ8"&gt;&lt;img alt="Alt text" src="https://img.youtube.com/vi/nBfAmCZMXQ8/0.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There are plenty of resources in the Ubuntu websites related to Ubuntu Core.&lt;/p&gt;
&lt;p&gt;To get started, we recommend to follow this guide to
&lt;a href="https://developer.ubuntu.com/core/get-started/kvm"&gt;run the operating system in a virtual machine&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;After that, and if you are feeling brave and want to help Michael, Zygmund and
Federico, you can download the candidate image instead, from
&lt;a href="http://cdimage.ubuntu.com/ubuntu-core/16/candidate/pending/ubuntu-core-16-amd64.img.xz"&gt;http://cdimage.ubuntu.com/ubuntu-core/16/candidate/pending/ubuntu-core-16-amd64.img.xz&lt;/a&gt;
This is the image that's being currently tested, so if you find something wrong
or weird, please
&lt;a href="https://bugs.launchpad.net/snapd/+filebug"&gt;report a bug in Launchpad&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Finally, if you want to learn more about the snaps that compose the image and
take a peek at the things that we'll cover in the following testing days, you
can follow the
&lt;a href="https://tutorials.ubuntu.com/tutorial/create-your-own-core-image#0"&gt;tutorial to create your own Core image&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;On this session we were also accompanied by
&lt;a href="https://twitter.com/sdrobertw"&gt;Robert Wolff&lt;/a&gt; who works on 96boards at Linaro.
He has an awesome show every Thursday called
&lt;a href="https://www.96boards.org/openhours/"&gt;Open Hours&lt;/a&gt;. At 96boards they are
building open Linux boards for prototyping and embedded computing. Anybody can
jump into the Open Hours to learn more about this cool work.&lt;/p&gt;
&lt;p&gt;The great news that Robert brought is that both Open Hours and Ubuntu Testing
Days will be focused on Ubuntu Core this month. He will be our guest again next
Friday, February 10th, where he will be talking about the
&lt;a href="http://www.96boards.org/product/dragonboard410c/"&gt;DragonBoard 410c&lt;/a&gt;. Also my
good friend &lt;a href="https://plus.google.com/+OliverGrawert"&gt;Oliver Grawert&lt;/a&gt; will be
with us, and he will talk about the work he has been doing to enable Ubuntu in
this board.&lt;/p&gt;
&lt;p&gt;Great topics ahead, and a full new world of possiblities now that we are
mixing free software with open hardware and affordable prototyping tools.
Remember, every Friday in &lt;a href="http://ubuntuonair.com/"&gt;http://ubuntuonair.com/&lt;/a&gt;,
no se lo pierda.&lt;/p&gt;&lt;/div&gt;</description><category>free software</category><category>testing</category><category>ubuntu</category><guid>http://elopio.net/blog/ubuntu-testing-day-wrap-up-20170203/</guid><pubDate>Thu, 09 Feb 2017 05:38:13 GMT</pubDate></item></channel></rss>